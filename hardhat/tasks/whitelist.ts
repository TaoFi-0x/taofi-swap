import { runWhitelist } from "../../test/helpers/whitelist";
import { task } from "hardhat/config";
import { exit } from "process";
import axios from "axios";

task("whitelist", "whitelists deployer in bittensor localnet evm").setAction(
  async ({}, { getNamedAccounts }) => {
    try {
      const { deployer } = await getNamedAccounts();
      await runWhitelist([deployer]);
    } catch (err) {
      console.log("ERROR");
      console.error(err);
      exit(1);
    }
  },
);

task("whitelist-remoteCall", "whitelists remote call in wrapper contract").setAction(
  async ({}, { ethers }) => {
    try {
      const signers = await ethers.getSigners()
      const WRAPPER_ABI = [{"inputs":[],"stateMutability":"nonpayable","type":"constructor"},{"inputs":[],"name":"BRIDGE_FAILED","type":"error"},{"inputs":[],"name":"EXTERNAL_CALL_FAILED","type":"error"},{"inputs":[],"name":"INVALID_ADDRESS","type":"error"},{"inputs":[],"name":"INVALID_TARGET","type":"error"},{"inputs":[],"name":"INVALID_VALUE","type":"error"},{"inputs":[],"name":"NOT_CONTRACT","type":"error"},{"inputs":[],"name":"SWAP_FAILED","type":"error"},{"inputs":[],"name":"UNAUTHORIZED_CALL_TYPE","type":"error"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"bytes32","name":"target","type":"bytes32"},{"indexed":true,"internalType":"bytes4","name":"selector","type":"bytes4"},{"indexed":false,"internalType":"bool","name":"allowed","type":"bool"}],"name":"AllowedRemoteCallUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newBridgeToken","type":"address"}],"name":"BridgeTokenUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newBridge","type":"address"}],"name":"BridgeUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"uint8","name":"version","type":"uint8"}],"name":"Initialized","type":"event"},{"anonymous":false,"inputs":[{"indexed":false,"internalType":"address","name":"newInterchainAccountRouter","type":"address"}],"name":"InterchainAccountRouterUpdated","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"previousOwner","type":"address"},{"indexed":true,"internalType":"address","name":"newOwner","type":"address"}],"name":"OwnershipTransferred","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"},{"indexed":false,"internalType":"bytes","name":"data","type":"bytes"}],"name":"SwapAndBridgeExecuted","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"target","type":"address"}],"name":"TargetAddressWhitelisted","type":"event"},{"inputs":[{"internalType":"bytes32","name":"","type":"bytes32"},{"internalType":"bytes4","name":"","type":"bytes4"}],"name":"allowedRemoteCalls","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bridge","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[],"name":"bridgeToken","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"emergencyETHRecovery","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"token","type":"address"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"emergencyTokenRecovery","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"initialize","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"interchainAccountRouter","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"to","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Call","name":"_call","type":"tuple"}],"name":"isAllowedRemoteCall","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"","type":"address"}],"name":"isTargetAddressWhitelisted","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"address","name":"fromToken","type":"address"},{"internalType":"uint256","name":"fromAmount","type":"uint256"},{"internalType":"address","name":"approvalAddress","type":"address"},{"internalType":"address","name":"target","type":"address"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct SwapBridgeAndCallFromMain.SwapParams","name":"_swapParams","type":"tuple"},{"components":[{"internalType":"bytes32","name":"router","type":"bytes32"},{"internalType":"bytes32","name":"ism","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"to","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Call[]","name":"calls","type":"tuple[]"},{"internalType":"bytes","name":"hookMetadata","type":"bytes"}],"internalType":"struct SwapBridgeAndCallFromMain.RemoteCallsParams","name":"_params","type":"tuple"},{"internalType":"uint256","name":"_bridgeCost","type":"uint256"}],"name":"lifiSwapBridgeAndCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"owner","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"},{"inputs":[{"components":[{"internalType":"bytes32","name":"router","type":"bytes32"},{"internalType":"bytes32","name":"ism","type":"bytes32"},{"components":[{"internalType":"bytes32","name":"to","type":"bytes32"},{"internalType":"uint256","name":"value","type":"uint256"},{"internalType":"bytes","name":"data","type":"bytes"}],"internalType":"struct Call[]","name":"calls","type":"tuple[]"},{"internalType":"bytes","name":"hookMetadata","type":"bytes"}],"internalType":"struct SwapBridgeAndCallFromMain.RemoteCallsParams","name":"_params","type":"tuple"}],"name":"remoteCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[],"name":"renounceOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"bytes32","name":"_target","type":"bytes32"},{"internalType":"bytes4","name":"_selector","type":"bytes4"},{"internalType":"bool","name":"_allowed","type":"bool"}],"name":"setAllowedRemoteCall","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_bridge","type":"address"}],"name":"setBridge","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_bridgeToken","type":"address"}],"name":"setBridgeToken","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_interchainAccountRouter","type":"address"}],"name":"setInterchainAccountRouter","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"_target","type":"address"},{"internalType":"bool","name":"_isWhitelisted","type":"bool"}],"name":"setTargetAddressWhitelisted","outputs":[],"stateMutability":"payable","type":"function"},{"inputs":[{"internalType":"address","name":"newOwner","type":"address"}],"name":"transferOwnership","outputs":[],"stateMutability":"nonpayable","type":"function"},{"inputs":[],"name":"treasury","outputs":[{"internalType":"address","name":"","type":"address"}],"stateMutability":"view","type":"function"}];
      const wrapperContract = new ethers.Contract("0xC3697b332688b762bCBA6765A5b16fe5E8D8034F", WRAPPER_ABI, ethers.provider);
      const response = await axios.post("https://taofi-api.web.app/getAllAlphaTokenAddress");
      const alphaTokenAddresses = response.data.tokenAddresses;
      console.log(alphaTokenAddresses, alphaTokenAddresses.length);

      let tx;
      for (const alphaTokenAddress of alphaTokenAddresses) {
        console.log("Setting -- ", alphaTokenAddress)
        tx = await wrapperContract.connect(signers[0]).setAllowedRemoteCall(ethers.utils.hexZeroPad(alphaTokenAddress, 32), "0x095ea7b3", true)
        await tx.wait(1);
        tx = await wrapperContract.connect(signers[0]).setAllowedRemoteCall(ethers.utils.hexZeroPad(alphaTokenAddress, 32), "0xa9059cbb", true)
        await tx.wait(1);
      }

    } catch (err) {
      console.log("ERROR");
      console.error(err);
      exit(1);
    }
  },
);